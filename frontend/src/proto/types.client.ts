// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "types.proto" (package "pingtest", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { PingTestService } from "./types";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { PingTestResponse } from "./types";
import type { PingTestRequest } from "./types";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service pingtest.PingTestService
 */
export interface IPingTestServiceClient {
    /**
     * @generated from protobuf rpc: Ping(pingtest.PingTestRequest) returns (pingtest.PingTestResponse);
     */
    ping(input: PingTestRequest, options?: RpcOptions): UnaryCall<PingTestRequest, PingTestResponse>;
}
/**
 * @generated from protobuf service pingtest.PingTestService
 */
export class PingTestServiceClient implements IPingTestServiceClient, ServiceInfo {
    typeName = PingTestService.typeName;
    methods = PingTestService.methods;
    options = PingTestService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: Ping(pingtest.PingTestRequest) returns (pingtest.PingTestResponse);
     */
    ping(input: PingTestRequest, options?: RpcOptions): UnaryCall<PingTestRequest, PingTestResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<PingTestRequest, PingTestResponse>("unary", this._transport, method, opt, input);
    }
}
