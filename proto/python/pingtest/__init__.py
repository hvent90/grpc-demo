# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: types.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    Dict,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


@dataclass(eq=False, repr=False)
class PingTestRequest(betterproto.Message):
    message: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class PingTestResponse(betterproto.Message):
    message: str = betterproto.string_field(1)


class PingTestServiceStub(betterproto.ServiceStub):
    async def ping(
        self,
        ping_test_request: "PingTestRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "PingTestResponse":
        return await self._unary_unary(
            "/pingtest.PingTestService/Ping",
            ping_test_request,
            PingTestResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class PingTestServiceBase(ServiceBase):

    async def ping(self, ping_test_request: "PingTestRequest") -> "PingTestResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_ping(
        self, stream: "grpclib.server.Stream[PingTestRequest, PingTestResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.ping(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/pingtest.PingTestService/Ping": grpclib.const.Handler(
                self.__rpc_ping,
                grpclib.const.Cardinality.UNARY_UNARY,
                PingTestRequest,
                PingTestResponse,
            ),
        }
